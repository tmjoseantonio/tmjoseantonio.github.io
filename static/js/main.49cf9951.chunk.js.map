{"version":3,"sources":["MetaTags.js","components/FullpageSection/index.js","components/ContactLinks/ContactLink/index.js","components/ContactLinks/index.js","components/PageHeader/index.js","pages/Home/index.js","components/ProfileSummary/index.js","pages/About/index.js","pages/Ventas/index.js","components/PageFooter/index.js","serviceWorker.js","index.js","App.js"],"names":["description","charset","name","content","http-equiv","property","children","restProps","className","link","target","rel","href","data","Links","linkItems","map","index","ContactLink","key","title","subtitle","pageHeaderData","contactLinksData","Fragment","id","to","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","basename","MetaTags","exact","path","component","Home","About","Ventas","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49cf9951.chunk.js","sourcesContent":["import React from \"react\";\nimport Helmet from \"react-helmet\";\n\nconst description = \"Jose is a Web Engineer experienced in Web technologies with a strong background and knowledge of accessibility guidelines such as Section 508, W3C WAI, content management systems and JavaScript based web applications\"\n\nexport default () => (\n<Helmet>\n    <meta charset=\"utf-8\" />\n    <title>Jose Tovar - Web Engineer</title>\n    <meta name=\"description\" content={description} />\n    <meta name=\"author\" content=\"Jose Tovar\" />\n    <meta name=\"subject\" content=\"frontend development\" />\n    <meta name=\"description\" content={description} />\n    <meta name=\"classification\" content={description}/>\n    <meta name=\"keywords\" content=\"frontend, developer, web developer, javascript, html5, front-end, web ui\"/>\n    <meta name=\"language\" content=\"english\" />\n    <meta http-equiv=\"cache-control\" content=\"no-cache\" />\n    <meta name=\"copyright\" content=\"Jose Tovar\" />\n    <meta name=\"distribution\" content=\"global\" />\n    <meta name=\"robots\" content=\"index,follow\" />\n    <meta property=\"og:url\" content=\"http://tmjoseantonio.com\" />\n    <meta property=\"og:type\" content=\"website\" />\n    <meta property=\"og:title\" content=\"Jose Tovar - Web Engineer\" />\n    <meta property=\"og:description\" content={description}/>\n    <meta name=\"twitter:card\" content=\"summary\" />\n    <meta name=\"twitter:site\" content=\"@tmjoseantonio\" />\n    <meta name=\"twitter:creator\" content=\"@tmjoseantonio\" />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n    <meta name=\"msapplication-TileColor\" content=\"#ffffff\" />\n</Helmet>\n);\n","import React from \"react\";\nimport './index.scss';\n\nexport default ({children, ...restProps}) => (\n    <section className=\"fullpage-section\" {...restProps}>\n        {children}\n    </section>\n);\n","import React from \"react\";\n\nexport default ({children, link, ...restProps}) => (\n    <li className=\"contact-links__list-item\" {...restProps}>\n        <a\n            className=\"contact-links__link\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href={link}\n        >\n            {children}\n        </a>\n    </li>\n);\n","import React from \"react\";\nimport './index.scss';\nimport ContactLink from './ContactLink';\n\nexport default ({data, ...restProps}) => {\n    const Links = data.linkItems.map(({name, link}, index) => (\n        <ContactLink\n            link={link}\n            key={index}\n        >\n            {name}\n        </ContactLink>\n    ));\n\n    return (\n        <nav className=\"contact-links\" {...restProps}>\n            <ul className=\"contact-links__list\">\n                {Links}\n            </ul>\n        </nav>\n    );\n}\n","import React from 'react';\nimport './index.scss';\n\nexport default ({title, subtitle, children, ...restProps}) => (\n    <header className=\"page-header\">\n        <h1 className=\"page-header__title\">\n        <span>{title}Jose Tovar</span>\n        <small className=\"page-header__title-small\">\n            {subtitle} Web Engineer, husband, gamer and a terrible musician\n        </small>\n        </h1>\n    </header>\n);\n","import React from 'react';\nimport FullpageSection from '../../components/FullpageSection';\nimport ContactLinks from '../../components/ContactLinks';\nimport PageHeader from '../../components/PageHeader';\nimport { Link } from \"react-router-dom\";\n\nconst pageHeaderData = {\n    title: 'Jose Tovar',\n    subtitle: 'Web Engineer, husband, gamer and a terrible musician'\n};\n\nconst contactLinksData = { linkItems: [\n    { name: 'Twitter', link: 'http://twitter.com/tmjoseantonio' },\n    { name: 'Github', link: 'http://github.com/tmjoseantonio' },\n    { name: 'LinkedIn', link: 'https://co.linkedin.com/in/josetovarfrontenddeveloper' }\n]};\n\nexport default () => (\n    <React.Fragment>\n        <FullpageSection id=\"headline\">\n            <PageHeader data={pageHeaderData} />\n\n            <ContactLinks data={contactLinksData} />\n            <Link to=\"/about\">&lt; More about Jose &gt;</Link>\n        </FullpageSection>\n    </React.Fragment>\n);\n","import React from 'react';\nimport './index.scss';\n\nexport default ({data, children, ...restProps}) => (\n    <div className=\"profile-summary\" {...restProps} dangerouslySetInnerHTML={{ __html: data }}>\n        {children}\n    </div>\n);","import React from 'react';\nimport FullpageSection from '../../components/FullpageSection';\nimport ProfileSummary from '../../components/ProfileSummary';\nimport { Link } from \"react-router-dom\";\n\nconst profileDescriptionData = `<p>Jose is a Web Engineer experienced in Web technologies with a strong background and knowledge of accessibility guidelines such as Section 508, W3C WAI, content management systems and JavaScript based web applications.</p><p>His goals as a Web Engineer are to integrate visual comps, user experience requirements, web accessibility standards, and SEO guidelines into well structured, readable and maintainable code.</p>`;\n\nexport default () => (\n    <React.Fragment>\n        <FullpageSection id=\"more-about-jose\">\n            <ProfileSummary data={profileDescriptionData}/>\n            <Link to=\"/\">&lt; Back to contact info &gt;</Link>\n        </FullpageSection>\n    </React.Fragment>\n);\n","import React from \"react\";\nimport FullpageSection from '../../components/FullpageSection';\n\nexport default () => (\n    <React.Fragment>\n        <FullpageSection>\n            <p>holaaaa</p>\n        </FullpageSection>\n    </React.Fragment>\n)","import React from \"react\";\nimport './index.scss';\n\nexport default ({children, ...restProps}) => (\n    <footer className=\"page-footer\" {...restProps}>\n        <summary className=\"page-footer__summary\">{children}</summary>\n    </footer>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./fonts.css\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport MetaTags from './MetaTags';\nimport Home from './pages/Home';\nimport About from './pages/About';\nimport Ventas from './pages/Ventas';\nimport Footer from './components/PageFooter';\n\nexport default function App() {\n  return (\n    <HashRouter basename='/'>\n      <MetaTags />\n      <Route exact path=\"/\" component={Home}/>\n      <Route exact path=\"/about\" component={About}/>\n      <Route path=\"/ventas\" component={Ventas}/>\n      <Footer>© Jose Tovar</Footer>\n    </HashRouter>\n  );\n}\n"],"sourceRoot":""}